import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper

plugins {
    id 'fabric-loom' // version from latest-loom.gradle via settings.gradle's pluginManagement
    id 'maven-publish'
}

def mc_version_name(){
    String key = 'minecraft_version_name'
    if (project.hasProperty(key)) {String value = project.getProperties().get(key); return !value.isEmpty() ? value : project.minecraft_version}
    else {return project.minecraft_version}
}
version = "${mod_version}+${mc_version_name()}-Fabric"
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }
    maven {
        name = 'Modrinth'
        url = 'https://api.modrinth.com/maven'
    }
    maven { url = "https://maven.terraformersmc.com/releases/" }
}

loom {
    mods {
        "{$archives_base_name}" {
            sourceSet sourceSets.main
        }
    }
}

def getReleaseVersion(minecraftVersion) {
    // Truncate version after first non-integer/dot
    def releaseVersion = minecraftVersion.replaceAll(/[^0-9.].*/, '')
    if (minecraftVersion != releaseVersion) {println('==='); println('Resolved \"' + minecraftVersion + '\" as \"' + releaseVersion + '\" for Fabric and Parchment.'); println('===')}
    return releaseVersion
}

def releaseVersion = getReleaseVersion(minecraft_version)

def getLatestFabric(minecraftVersion) {
    def fApiXmlUrl = 'https://maven.fabricmc.net/net/fabricmc/fabric-api/fabric-api/maven-metadata.xml'
    def fLoaderJsonUrl = 'https://meta.fabricmc.net/v2/versions/loader'

    def fLoaderJson = new JsonSlurper().parseText(new URI(fLoaderJsonUrl).toURL().text)
    def fLoaderLatestVersion = fLoaderJson.get(0).version
    println('Fabric Loader: ' + fLoaderLatestVersion)

    def fApiLatestVersion
    try {
        def metadata = new XmlSlurper().parse(fApiXmlUrl)
        def versions = metadata.versioning.versions.version*.text()
        fApiLatestVersion = versions.findAll { it ==~ /\d+(\.\d+)*.${minecraftVersion}/ }.last()
        println('Fabric Api: ' + fApiLatestVersion)
    } catch (Exception e) {
        throw new GradleException("Failed to fetch $fApiXmlUrl: ${e.message}")
    }
    return [fLoaderLatestVersion, fApiLatestVersion]
}

def getParchmentWithDecrementedMC(minecraftVersion) {
    def url = 'https://versioning.parchmentmc.org/versions'
    def response
    try {
        response = new URI(url).toURL().text
        if (response.length() < 100) throw new Exception("Response too short")
    } catch (Exception e) {
        println "Loading local fallback due to: ${e.message}"
        response = new File("../../resources/versioning.parchmentmc.org/versions").text
    }
    def json = new JsonSlurper().parseText(response)
    def releases = json['releases']

    // Truncate version after first non-integer/dot
    def releaseVersion = minecraftVersion.replaceAll(/[^0-9.].*/, '')

    def versionParts = releaseVersion.toString().split('\\.')
    if (versionParts.size() == 2) versionParts << "0"
    if (versionParts.size() < 2 || versionParts.size() > 3) throw new GradleException("Invalid Minecraft version format: $minecraftVersion")
    def (major, minor, patch) = versionParts.collect {it as Integer}
    def decrementedVersion = patch < 1 ? "$major.${minor - 1}.99" : "$major.$minor.${patch - 1}"

    while (!releases["$major.$minor.$patch"] && !(patch == 0 && releases["$major.$minor"])) {
        if (patch > 0) {
            patch--
        } else {
            if (minor == 0) break
            minor--
            patch = 99
        }
    }
    def foundVersion = patch == 0 && releases["$major.$minor"] ? "$major.$minor" : "$major.$minor.$patch"
    if (releases[foundVersion]) {
        def parchmentDate = releases[foundVersion]
        logger.print("Parchment: " + foundVersion + " + " + parchmentDate as String + "\n")
        return [decrementedVersion, foundVersion, parchmentDate]
    }
    throw new GradleException("No valid Parchment version found for $minecraftVersion or earlier.")
}

def (fabric_loader_version, fabric_api_version) = getLatestFabric(releaseVersion)
def (decrementedVersion, pMinecraftVersion, mostRecentParchmentDate) = getParchmentWithDecrementedMC(releaseVersion)

ext.mod = { String localOverrideKey, Object dep ->
    File file = file("../.${localOverrideKey}-local");
    if (file.exists()) {
        dependencies.implementation(dep)
    } else {
        dependencies.modImplementation(dep)
    }
}

ext.includeMod = { String localOverrideKey, Object dep ->
    mod(localOverrideKey, dep)
    dependencies.include(dep)
}

dependencies {
    implementation 'org.apache.commons:commons-text:1.12.0'
    minecraft "com.mojang:minecraft:${project.minecraft_version}"

    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${pMinecraftVersion}:${mostRecentParchmentDate}@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}"
}

def minecraft_version_1() {
    String key = 'minecraft_version_upper'
    if (project.hasProperty(key)) {String value = project.getProperties().get(key); return !value.isEmpty() ? value : "2.0.0"}
    else {return "2.0.0"} // Effectively no upper bound
}

processResources {
    // Disregard Patch version from Fabric Loader for dependency
    var fabric_loader_version_0 = "${fabric_loader_version}".replaceFirst(/\.[^.]*$/, '.0')

    var replaceProperties = [
            loader_version   : fabric_loader_version_0, mod_id: mod_id, mod_name: mod_name,
            mod_license      : mod_license, mod_version: mod_version, mod_description: mod_description,
            minecraft_version: minecraft_version, minecraft_version_0: decrementedVersion, minecraft_version_1: minecraft_version_1()
    ]
    inputs.properties replaceProperties

    filesMatching("fabric.mod.json") {
        expand replaceProperties
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

jar {
    inputs.property "archivesName", project.base.archivesName

    from("LICENSE") {
        rename { "${it}_${inputs.properties.archivesName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}